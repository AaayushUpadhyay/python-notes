Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> import time
>>> 
>>> time.ctime()
'Fri Nov  8 17:52:12 2019'
>>> time.time()
1573215781.7689986
>>> import time as t
>>> t.time()
1573215815.2390084
>>> t.localtime(t.time())
time.struct_time(tm_year=2019, tm_mon=11, tm_mday=8, tm_hour=17, tm_min=54, tm_sec=3, tm_wday=4, tm_yday=312, tm_isdst=0)
>>> t.asctime(t.localtime(t.time()))
'Fri Nov  8 17:54:47 2019'
>>> t.asctime(t.localtime(t.time()+86400))
'Sat Nov  9 17:55:21 2019'
>>> t.asctime(t.localtime(0))
'Thu Jan  1 05:30:00 1970'
>>> t.tzname
('India Standard Time', 'India Daylight Time')
>>> t.process_time()
0.234375
>>> t.perf_counter()
624.796633383
>>> 
>>> import calendar as c
>>> print(c.calendar(2020))
                                  2020

      January                   February                   March
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
       1  2  3  4  5                      1  2                         1
 6  7  8  9 10 11 12       3  4  5  6  7  8  9       2  3  4  5  6  7  8
13 14 15 16 17 18 19      10 11 12 13 14 15 16       9 10 11 12 13 14 15
20 21 22 23 24 25 26      17 18 19 20 21 22 23      16 17 18 19 20 21 22
27 28 29 30 31            24 25 26 27 28 29         23 24 25 26 27 28 29
                                                    30 31

       April                      May                       June
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
       1  2  3  4  5                   1  2  3       1  2  3  4  5  6  7
 6  7  8  9 10 11 12       4  5  6  7  8  9 10       8  9 10 11 12 13 14
13 14 15 16 17 18 19      11 12 13 14 15 16 17      15 16 17 18 19 20 21
20 21 22 23 24 25 26      18 19 20 21 22 23 24      22 23 24 25 26 27 28
27 28 29 30               25 26 27 28 29 30 31      29 30

        July                     August                  September
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
       1  2  3  4  5                      1  2          1  2  3  4  5  6
 6  7  8  9 10 11 12       3  4  5  6  7  8  9       7  8  9 10 11 12 13
13 14 15 16 17 18 19      10 11 12 13 14 15 16      14 15 16 17 18 19 20
20 21 22 23 24 25 26      17 18 19 20 21 22 23      21 22 23 24 25 26 27
27 28 29 30 31            24 25 26 27 28 29 30      28 29 30
                          31

      October                   November                  December
Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su      Mo Tu We Th Fr Sa Su
          1  2  3  4                         1          1  2  3  4  5  6
 5  6  7  8  9 10 11       2  3  4  5  6  7  8       7  8  9 10 11 12 13
12 13 14 15 16 17 18       9 10 11 12 13 14 15      14 15 16 17 18 19 20
19 20 21 22 23 24 25      16 17 18 19 20 21 22      21 22 23 24 25 26 27
26 27 28 29 30 31         23 24 25 26 27 28 29      28 29 30 31
                          30

>>> c.prcal(2020,3,2,20,2)


>>> c.prmonth(2020,1)
    January 2020
Mo Tu We Th Fr Sa Su
       1  2  3  4  5
 6  7  8  9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
>>> c.isleap(2019)
False
>>> c.leapdays(2000,2020)
5
>>> c.leapdays(2000,2021)
6
>>> c.weekday(2020,1,1)
2
>>> 
>>> c.weekheader(12)
'   Monday      Tuesday     Wednesday     Thursday      Friday      Saturday      Sunday   '
>>> c.day_name
<calendar._localized_day object at 0x02B1F270>
>>> c.day_name(1)
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    c.day_name(1)
TypeError: '_localized_day' object is not callable
>>> 
>>> 
>>> from math import *
>>> import moda
True False
>>> moda.arm(12)
False
>>> import moda.py
Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    import moda.py
ModuleNotFoundError: No module named 'moda.py'; 'moda' is not a package
>>> from moda import arm
>>> arm(153)
True
>>> import nayamod
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    import nayamod
ModuleNotFoundError: No module named 'nayamod'
>>> 
>>> 
>>> import os
>>> os.getcwd()
'C:\\Users\\amit\\AppData\\Local\\Programs\\Python\\Python37-32'
>>> os.chdir(r'f:\')
	 
SyntaxError: EOL while scanning string literal
>>> os.chdir(r'f')
Traceback (most recent call last):
  File "<pyshell#40>", line 1, in <module>
    os.chdir(r'f')
FileNotFoundError: [WinError 2] The system cannot find the file specified: 'f'
>>> os.chdir('f:/')
>>> os.getcwd()
'f:\\'
>>> import nayamod
>>> 
>>> 
>>> 
>>> 
>>> a=int(input("enter a number"))
enter a numberone
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    a=int(input("enter a number"))
ValueError: invalid literal for int() with base 10: 'one'
>>> 1/0
Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    1/0
ZeroDivisionError: division by zero
>>> a=12
>>> a.sort()
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    a.sort()
AttributeError: 'int' object has no attribute 'sort'
>>> 
>>> 
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
except:
	print("enter a valid integer")
else:
	print("result is",c)
finally:
	print("khaliyar")

	
enter a numberq
enter a valid integer
khaliyar
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
except:
	print("enter a valid integer")
else:
	print("result is",c)
finally:
	print("khaliyar")

	
enter a number1
enter a number2
result is 0.5
khaliyar
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
except:
	print("enter a valid integer")
else:
	print("result is",c)

	
enter a number1
enter a number0
enter a valid integer
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	print("result is",c)
except:
	print("enter a valid integer")

	
enter a number
enter a valid integer
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	print("result is",c)
except ValueError:
	print("enter a valid integer")
except ZeroDivisionError:
	print("denominator must be non zero")

	
enter a number1
enter a number0
denominator must be non zero
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	print("result is",c)
except ValueError:
	print("enter a valid integer")
except ZeroDivisionError:
	print("denominator must be non zero")

	
enter a number1
enter a numberq
enter a valid integer
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	c.sort()
	print("result is",c)
except ValueError:
	print("enter a valid integer")
except ZeroDivisionError:
	print("denominator must be non zero")

	
enter a number1
enter a number2
Traceback (most recent call last):
  File "<pyshell#77>", line 5, in <module>
    c.sort()
AttributeError: 'float' object has no attribute 'sort'
>>> 
>>> 
>>> 
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	c.sort()
	print("result is",c)
except Exception as q:
	print(type(q),q)

	
enter a number1
enter a numberq
<class 'ValueError'> invalid literal for int() with base 10: 'q'
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	c.sort()
	print("result is",c)
except Exception as q:
	print(type(q),q)

	
enter a number1
enter a number0
<class 'ZeroDivisionError'> division by zero
>>> try:
	a=int(input("enter a number"))
	b=int(input("enter a number"))
	c=a/b
	c.sort()
	print("result is",c)
except Exception as q:
	print(q)

	
enter a number1
enter a number2
'float' object has no attribute 'sort'
>>> 
>>> def fun(a,b):
	if a<100 or b<100:
		raise ValueError('use dimag for low level calculations')
	print(a/b)

	
>>> fun(2,3)
Traceback (most recent call last):
  File "<pyshell#94>", line 1, in <module>
    fun(2,3)
  File "<pyshell#93>", line 3, in fun
    raise ValueError('use dimag for low level calculations')
ValueError: use dimag for low level calculations
>>> def fun(a,b):
	if a<100 or b<100:
		raise AssertionError('use dimag for low level calculations')
	print(a/b)

	
>>> fun(2,3)
Traceback (most recent call last):
  File "<pyshell#97>", line 1, in <module>
    fun(2,3)
  File "<pyshell#96>", line 3, in fun
    raise AssertionError('use dimag for low level calculations')
AssertionError: use dimag for low level calculations
>>> def fun(a,b):
	assert(a>100 and b>100),'use dimag for low level calculations'
	print(a/b)

	
>>> fun(2,3)
Traceback (most recent call last):
  File "<pyshell#100>", line 1, in <module>
    fun(2,3)
  File "<pyshell#99>", line 2, in fun
    assert(a>100 and b>100),'use dimag for low level calculations'
AssertionError: use dimag for low level calculations
>>> 
